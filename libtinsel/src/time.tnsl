/*--
 *-- Time Module
 *-- Version 1, October 2022
 *-- Various time related functions
 *-- Marinos Pappas
 */
library time

var CLOCK_REALTIME: int = 0
var tv: int,
    tv1: int
var t_ptr: intptr,
    t_ptr1: intptr

var UNIT_SEC: int = 2,
    UNIT_MILLISEC: int = 1,
    UNIT_MICROSEC: int = 0

var time_epoch: int

fun clock_gettime(clock: int, time_now: intptr) @external:void
fun time(time_t: intptr) @external:void
fun ctime(time_t: intptr) @external:string

// timeout for secs
fun timeout_sec(duration: int) :void {
    var start_time: int,
        start_nsec: int,
        time_now: int,
        nsec_now: int,
        sec_difference: int,
        nsec_difference: int
    t_ptr = addr(tv)
    t_ptr1 = addr(tv1)
    clock_gettime(CLOCK_REALTIME, t_ptr)
    start_time = [t_ptr]
    start_nsec = [t_ptr1]
    while (1) {
        clock_gettime(CLOCK_REALTIME, t_ptr)
        time_now = [t_ptr]
        nsec_now = [t_ptr1]
        sec_difference = time_now - start_time
        nsec_difference = nsec_now - start_nsec
        if (sec_difference >= duration) {
            if (nsec_difference > 0) {
                return
            }
        }
    }
}

// timeout for 1 - 999 millisecs
fun timeout_millisec(duration: int) @global:void {
    var start_msec: int
    var msec_now: int
    var msec_difference: int
    t_ptr = addr(tv)
    t_ptr1 = addr(tv1)
    clock_gettime(CLOCK_REALTIME, t_ptr)
    start_msec = [t_ptr1] / 1000000
    while (1) {
        clock_gettime(CLOCK_REALTIME, t_ptr)
        msec_now = [t_ptr1] / 1000000
        msec_difference = msec_now - start_msec
        if (msec_difference < 0) {
		    msec_difference = msec_difference + 1000
		}
	    if (msec_difference >= duration) {
            return
        }
    }
}

// timeout for 1 - 999,999 microsecs
fun timeout_microsec(duration: int) :void {
    var start_usec: int
    var usec_now: int
    var usec_difference: int
    t_ptr = addr(tv)
    t_ptr1 = addr(tv1)
    clock_gettime(CLOCK_REALTIME, t_ptr)
    start_usec = [t_ptr1] / 1000
    while (1) {
        clock_gettime(CLOCK_REALTIME, t_ptr)
        usec_now = [t_ptr1] / 1000
        usec_difference = usec_now - start_usec
        if (usec_difference < 0) {
		    usec_difference = usec_difference + 1000000
		}
	    if (usec_difference >= duration) {
            return
        }
    }
}

//
// timeout function
// accepts: duration of timeout
//          units: 1=millisec, 0=microsec, or sec (default)
fun timeout(duration: int, unit: int) @global:void {
    var timeout_duration: int;
    timeout_duration = duration
    if (timeout_duration < 0) {
        timeout_duration = -timeout_duration
    }
    if (unit == UNIT_MILLISEC) {
        if (timeout_duration / 1000 > 0) {
            timeout_sec(timeout_duration / 1000)
        }
        timeout_millisec(timeout_duration % 1000)
        return
    }
    if (unit == UNIT_MICROSEC) {
        if (timeout_duration > 999999) {
            timeout_duration = 999999
        }
        if (timeout_duration / 1000 > 0) {
            timeout_millisec(timeout_duration / 1000)
        }
        timeout_microsec(timeout_duration % 1000)
        return
    }
    timeout_sec(timeout_duration)
    return
}

//
// getlocaltimestr
// returns the local time as string
fun getlocaltimestr() @global:string {
    time(addr(time_epoch))
    return ctime(addr(time_epoch))
}

endlibrary