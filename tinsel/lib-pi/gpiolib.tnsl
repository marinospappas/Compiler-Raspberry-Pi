/*--
 *-- GPIO library for the Raspberry Pi
 *-- Version 1.0, October 2022
 *-- Marinos Pappas
 *--
 */
library gpiolib

var gpio: intptr = 0
// GPIO registers
var GPFUNSEL0: int = 0
var GPSET0: int = 7
var GPCLEAR0: int = 10
var GPLEV0: int = 13

fun open(file:string, options:int) @external:int
fun close(fd:int) @external:int
fun mmap(address:intptr, length:int, prot:int, flags:int, fd:int, offset:intptr) @external:intptr
fun timeout(duration: int, unit: int) @external:void

fun read_gpio_reg(reg: int): int {
    var value: int;
    value = [gpio + reg*4]
    return value
}

fun write_gpio_reg(reg: int, value: int): void {
    [gpio + reg*4] = value
    return
}

/*
 * initialise gpio lib and set the gpio pointer to the gpio registers
 */
fun gpio_init() @global:int {
    var fd :int,
        FILE_FLAGS :int = 0x181002;
    var GPIO_MEM_NAME :string = "/dev/gpiomem"
    fd = open (GPIO_MEM_NAME, FILE_FLAGS)
    if (fd < 0) {
        println "could not open ", GPIO_MEM_NAME
        return -1
    }

    var ADDR :intptr = 0
    var BLOCK_SIZE :int = 4096
    var PROT_READ :int = 0x1
    var PROT_WRITE :int = 0x2
    var MAP_SHARED :int = 0x01
    var GPIO_BASE: intptr = 0x00200000
    gpio = mmap(ADDR, BLOCK_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, GPIO_BASE)
    if (gpio == -1) {
        println "could not map memory"
        return -1
    }
    close(fd)
    return 0
}

/*
 * read a gpio pin mode (0 = input, 1 = output)
 */
fun gpio_get_pin_mode(pin: int) @global:int {
    if (gpio == 0) {
        println "gpio not initialised"
        return -1
    }
    if (pin < 1 or pin > 27) {
        println "invalid gpio pin"
        return -1
    }
    var gpio_reg: int,
        shift_factor: int,
        reg_value: int,
        mode: int,
        mode_mask: int
    gpio_reg = GPFUNSEL0 + pin / 10
    shift_factor = (pin % 10) * 3
    mode_mask = 0b111 << shift_factor
    reg_value = read_gpio_reg(gpio_reg)
    mode = reg_value & mode_mask
    if (mode == 0) { return 0 }
    else { return 1 }
}

/*
 * set a gpio pin mode (0 = input, 1 = output)
 */
fun gpio_set_pin_mode(pin :int, mode :int) @global:int {
    if (gpio == 0) {
        println "gpio not initialised"
        return -1
    }
    if (pin < 1 or pin > 27) {
        println "invalid gpio pin"
        return -1
    }
    var gpio_reg: int,
        shift_factor: int,
        reg_value: int,
        new_value: int,
        mode_mask: int
    gpio_reg = GPFUNSEL0 + pin / 10
    shift_factor = (pin % 10) * 3
    mode_mask = 0b111 << shift_factor
    reg_value = read_gpio_reg(gpio_reg)
    new_value = reg_value & (~mode_mask)
    new_value = new_value | (mode << shift_factor)
    write_gpio_reg(gpio_reg, new_value)
    return 0
}

/*
 * read a gpio pin (0 = low, 1 = high)
 */
fun gpio_get_pin(pin :int) @global:int {
    if (gpio == 0) {
        println "gpio not initialised"
        return -1
    }
    if (pin < 1 or pin > 27) {
        println "invalid gpio pin"
        return -1
    }
    var shift_factor: int,
        reg_value: int,
        pin_value: int
    shift_factor = pin
    reg_value = read_gpio_reg(GPLEV0)
    pin_value = reg_value & (1 << shift_factor)
    if (pin_value == 0) { return 0 }
    else { return 1 }
}

/*
 * set a gpio pin (0 = low, 1 = high)
 */
fun gpio_set_pin(pin :int, value :int) @global:int {
    if (gpio == 0) {
        println "gpio not initialised"
        return -1
    }
    if (pin < 1 or pin > 27) {
        println "invalid gpio pin"
        return -1
    }
    var gpio_reg :int,
        shift_factor :int,
        new_value :int
    shift_factor = pin
    new_value = 1 << shift_factor
    if (value == 0) {
        gpio_reg = GPCLEAR0
    }
    else {
        gpio_reg = GPSET0
    }
    write_gpio_reg(gpio_reg, new_value)
    return 0
}

endlibrary
