/*--
 *-- tinsel full test
 *-- this program tests as many compiler features as possible
 *--
 */

program full_test

// global vars
var v1: int, v2: int = 25, result: int
var c1: string = "World!              ", c2: string(21), greeting: string = "Hello, "
var msg: string(100)

/////////////////////////////
// numerical expressions test
/////////////////////////////
fun num_expression(a1: int, a2: int, a3: int, a4: int): void {
    var result1: int, result2: int
    println "integer input: ", a1, ", ", a2, ", ", a3, ", ", a4
    result1 = (a1 + a2) / a3 - 14 - (-1) * ((a4 / (-a3)) + (1 - a2 * (6 + a1)))
    println "result1: (a1 + a2) / a3 - 14 - (-1) * ((a4 / (-a3)) + (1 - a2 * (6 + a1))) = ", result1
    result2 = -((((a1 + 1) * a2 + 5) * a3 - 120) * (-(a4 + 5)) - 99 )
    println "result2: -((((a1 + 1) * a2 + 5) * a3 - 120) * (-(a4 + 5)) - 99 ) = ", result2
    return
}

///////////////////////////
// boolean expressions test
///////////////////////////
fun bool_expression(a1: int, a2: int, a3: int): void {
    var result1: int, result2: int
    println "integer input: ", a1, ", ", a2, ", ", a3
    result1 = a1 >= a2 || a3
    print "result1: a1 >= a2 || a3 = "
    if (result1) { println "true" } else { println "false" }
    print "a3 is zero: "
    if (a3 == 0) { println "true" } else { println "false" }
    print "a3 is zero: "
    if (a3) { println "false" } else { println "true" }
    print "a3 is zero: "
    if (!a3) { println "true" } else { println "false" }
    print "a1 not equal to a3: "
    if (a1 != a3) { println "true" } else { println  "false" }
    if (a1 > 10) {
        print "result2: a1 > 10 AND a2 < 0 && a3 >= 5 = "
        if (a2 < 0 && a3 >= 5) { println "true" } else { println "false" }
    }
    else {
    if (a1 < 5) {
        print "result3: a1 < 5 AND a2 > 1 || a3 == 0 = "
        if (a2 > 1 || a3 == 0) { println "true" } else { println "false" }
    }
    else {
        print "result4: a1 is >=5 and <= 10 AND neither a2 nor a3 is 0 = "
        if (a2 && a3) { println "true" } else { println "false" }
    }
    }
    return
}

/////////////
// loops test
/////////////
fun print_triangle(lines: int): void {
    var line: int = 0
    while (line < lines) {
        for (i = 1 to line+1) {
            print i, " "
        }
        println ""
        line = line + 1
    }
    return
}

fun print_inverted_triangle(lines: int): void {
    for (line = lines down to 1) {
        for (i = 1 to line) {
            print i, " "
        }
        println ""
    }
    return
}

fun loops(a1: int, a2: int): void {
    var count: int = 0;
    println a1, " triangles"
    repeat {
        print_triangle(a2 / (a1-count))
        count = count + 1
    } until (count >= a1)
    count = 0
    println ""
    println a1, " inverted triangles"
    repeat {
        print_inverted_triangle(a2 / (a1-count))
        count = count + 1
    } until (count >= a1)
    return
}

///////////
// strings
///////////
fun strings(s1: string, s2:string): void {
    var temp: string(100), prompt: string = "the strings are: "
    print "s1 and s2 are identical: "
    if (s1 == s2) { println "true" } else { println "false" }
    print "s1 and s2 are different: "
    if (s1 != s2) { println "true" } else { println "false" }
    temp = s1 + ", " + s2
    println prompt, temp
    return
}

////////////////////
// global variables
////////////////////
fun global_vars(): void {
    result = v1 + v2
    println "result 1: ", result
    result = (v1+v2) * (v1-v2)
    println "result 2: ", result
    result = v1 * v2 - v1 / v2
    println "result 3: ", result
    print "strings are the same: "
    if (c1 == c2) { println "true" }
    if (c1 != c2) { println "false" }
    msg = greeting + c1
    println "greeting is: " + msg
    return
}

// main program
main {
    var x1: int = 0, x2: int = -1, x3: int = 10, x4: int
    var s1: string(21), s2: string = "World             ."

    println "initial values: ", x1, ", ", x2, ", ", x3, ", ", x4
    println s2, ", ", s1

    println ""
    println "1. numeric expressions"
    println "enter 4 integers (hit <enter> after each one): "
    read x1, x2, x3, x4
    num_expression(x1, x2, x3, x4)

    println ""
    println "2. boolean expressions and if-else"
    println "enter 3 small integers (hit <enter> after each one): "
    read x1, x2, x3
    bool_expression(x1, x2, x3)

    println ""
    println "3. loops"
    println "enter two small integers, one between 1 and 5 and one between 1 and 30"
    read x1, x2
    loops(x1, x2)

    println ""
    println "4. strings"
    println "enter two strings"
    read s1, s2
    strings(s1, s2)

    println ""
    println "5. global variables"
    println "initial values: ", v1, ", ", v2
    println c2, ", ", c1
    println "enter two integers"
    read v1, v2
    println "enter two strings"
    read c1, c2
    global_vars()

    exit
}

endprogram