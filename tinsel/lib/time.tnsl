/*--
 *-- Time Module
 *-- Version 1, October 2022
 *-- Various time related functions
 *-- Marinos Pappas
 */
library time

var CLOCK_REALTIME: int = 0
var tv: intarray(2)

var UNIT_SEC: int = 2,
    UNIT_MILLISEC: int = 1,
    UNIT_MICROSEC: int = 0

var tm: bytearray(80)
var time_epoch: int

fun clock_gettime(clock: int, time_now: intarray) @external:void
fun time(time_t: memptr) @external:void
fun ctime(time_t: memptr) @external:string
fun localtime_r(timep: memptr, result: bytearray) @external:void

//
// get local time
// returns local time in a byte array parameter
// format h:m:s d.m.y
//
fun getlocaltime(cur_time: bytearray) @global:void {
    time(addr(time_epoch))
    localtime_r(addr(time_epoch), tm)
    cur_time\0\ = tm\8\
    cur_time\1\ = tm\4\
    cur_time\2\ = tm\0\
    cur_time\3\ = tm\12\
    cur_time\4\ = tm\16\ + 1
    cur_time\5\ = tm\20\
    return
}

// timeout for secs
fun timeout_sec(duration: int) :void {
    var start_time: int,
        start_nsec: int,
        time_now: int,
        nsec_now: int,
        sec_difference: int,
        nsec_difference: int
    clock_gettime(CLOCK_REALTIME, tv)
    start_time = tv\0\
    start_nsec = tv\1\
    while (1) {

        //TODO: introduce system call sleep to free up the cpu (let it cool down)
        // same in the other timeout_xxx functions

        clock_gettime(CLOCK_REALTIME, tv)
        time_now = tv\0\
        nsec_now = tv\1\
        sec_difference = time_now - start_time
        nsec_difference = nsec_now - start_nsec
        if (sec_difference >= duration) {
            if (nsec_difference > 0) {
                return
            }
        }
    }
}

// timeout for 0 - 999 millisecs
fun timeout_millisec(duration: int) :void {
    var start_msec: int
    var msec_now: int
    var msec_difference: int
    clock_gettime(CLOCK_REALTIME, tv)
    start_msec = tv\1\ / 1000000
    while (1) {
        clock_gettime(CLOCK_REALTIME, tv)
        msec_now = tv\1\ / 1000000
        msec_difference = msec_now - start_msec
        if (msec_difference < 0) {
		    msec_difference = msec_difference + 1000
		}
	    if (msec_difference >= duration) {
            return
        }
    }
}

// timeout for 0 - 999,999 microsecs
fun timeout_microsec(duration: int) :void {
    var start_usec: int
    var usec_now: int
    var usec_difference: int
    clock_gettime(CLOCK_REALTIME, tv)
    start_usec = tv\1\ / 1000
    while (1) {
        clock_gettime(CLOCK_REALTIME, tv)
        usec_now = tv\1\ / 1000
        usec_difference = usec_now - start_usec
        if (usec_difference < 0) {
		    usec_difference = usec_difference + 1000000
		}
	    if (usec_difference >= duration) {
            return
        }
    }
}

//
// timeout function
// accepts: duration of timeout
//          units: 1=millisec, 0=microsec, or sec (default)
fun timeout(duration: int, unit: int) @global:void {
    if (duration < 0) { return }
    if (unit == UNIT_MILLISEC) {
        if (duration > 999) {
            timeout_sec(duration / 1000)
            timeout_millisec(duration % 1000)
        }
        else {
            timeout_millisec(duration % 1000)
        }
        return
    }
    if (unit == UNIT_MICROSEC) {
        if (duration > 999999) {
            timeout_sec(duration / 1000000)
            timeout_microsec(duration % 1000000)
        }
        else {
            timeout_microsec(duration)
        }
        return
    }
    timeout_sec(duration)
    return
}

//
// getlocaltimestr
// returns the local time as string
fun getlocaltimestr() @global:string {
    time(addr(time_epoch))
    return ctime(addr(time_epoch))
}

endlibrary