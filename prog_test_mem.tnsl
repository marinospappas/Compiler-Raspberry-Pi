program memory_read

var memptr: intptr, membase: int = 0x4000000
fun open(file:string, options:int) @external:int
fun mmap(a:int, b:int, c:int, d:int, e:int, f:int) @external:intptr

fun init_mem(): int {
    var fd: int
    /*
           #define O_CLOEXEC       02000000
           #define O_DSYNC         00010000
           #define __O_SYNC        04000000
           #define O_RDWR          00000002
     */
    fd = open ("/dev/mem", 6010002)
    if (fd < 0) {
        println "could nto open /dev/mem"
        return -1
    }
    /*
        #define    BLOCK_SIZE        (4*1024)
        #define PROT_READ       0x1             /* page can be read */
        #define PROT_WRITE      0x2             /* page can be written */
        #define MAP_SHARED      0x01            /* Share changes */
     */
    memptr = mmap(0, 4096, 3, 1, fd, membase)
    if (memptr < 0) {
        println "could not map memory"
        return -1
    }
    return 0
}

fun readmem(offset: int): int {
    var x: int
    x = [memptr + offset]
    return x
}

main {
    println readmem(0)
    println readmem(8)
    println readmem(16)
    println readmem(24)
}

endprogram